from micropython import const
from usb.device.hid import HIDInterface
import machine
import struct
import usb.device
import time

SDA_PIN = machine.Pin(4)
SCL_PIN = machine.Pin(5)

INT_PIN = machine.Pin(14, machine.Pin.IN, machine.Pin.PULL_UP)
IS_DEBUG = False

TOUCHPAD_ADDR = 0x2C
REPORT_ID = 0x01
_INTERFACE_PROTOCOL_MOUSE = const(0x02)
_TOUCH_PAD_REPORT_DESC = (
    b'\x05\x01\x09\x02\xA1\x01\x85\x02\x05\x01\x09\x01\xA1\x00\x05\x09\x19\x01\x29\x02\x15\x00\x25\x01\x75\x01\x95\x02\x81\x02\x05\x0D\x09\x32\x75\x01\x95\x01\x81\x02\x75\x05\x95\x01\x81\x03\x05\x01\x75\x10\x95\x01\x35\x00\x45\x00\x16\x00\x80\x26\xFF\x7F\x09\x30\x81\x26\x16\x00\x80\x26\xFF\x7F\x09\x31\x81\x26\xC0\xC0\x05\x0D\x09\x05\xA1\x01\x85\x01\x05\x0D\x09\x22\xA1\x02\x09\x47\x09\x42\x15\x00\x25\x01\x75\x01\x95\x02\x81\x02\x95\x06\x81\x03\x09\x51\x25\x0F\x75\x08\x95\x01\x81\x02\x05\x01\x09\x30\x75\x10\x55\x0E\x65\x11\x35\x00\x46\x5A\x04\x27\x39\x05\x00\x00\x81\x02\x09\x31\x46\xDA\x02\x27\x6C\x03\x00\x00\x81\x02\xC0\x05\x0D\x09\x22\xA1\x02\x09\x47\x09\x42\x15\x00\x25\x01\x75\x01\x95\x02\x81\x02\x95\x06\x81\x03\x09\x51\x25\x0F\x75\x08\x95\x01\x81\x02\x05\x01\x09\x30\x75\x10\x55\x0E\x65\x11\x35\x00\x46\x5A\x04\x27\x39\x05\x00\x00\x81\x02\x09\x31\x46\xDA\x02\x27\x6C\x03\x00\x00\x81\x02\xC0\x05\x0D\x09\x22\xA1\x02\x09\x47\x09\x42\x15\x00\x25\x01\x75\x01\x95\x02\x81\x02\x95\x06\x81\x03\x09\x51\x25\x0F\x75\x08\x95\x01\x81\x02\x05\x01\x09\x30\x75\x10\x55\x0E\x65\x11\x35\x00\x46\x5A\x04\x27\x39\x05\x00\x00\x81\x02\x09\x31\x46\xDA\x02\x27\x6C\x03\x00\x00\x81\x02\xC0\x05\x0D\x09\x22\xA1\x02\x09\x47\x09\x42\x15\x00\x25\x01\x75\x01\x95\x02\x81\x02\x95\x06\x81\x03\x09\x51\x25\x0F\x75\x08\x95\x01\x81\x02\x05\x01\x09\x30\x75\x10\x55\x0E\x65\x11\x35\x00\x46\x5A\x04\x27\x39\x05\x00\x00\x81\x02\x09\x31\x46\xDA\x02\x27\x6C\x03\x00\x00\x81\x02\xC0\x05\x0D\x09\x22\xA1\x02\x09\x47\x09\x42\x15\x00\x25\x01\x75\x01\x95\x02\x81\x02\x95\x06\x81\x03\x09\x51\x25\x0F\x75\x08\x95\x01\x81\x02\x05\x01\x09\x30\x75\x10\x55\x0E\x65\x11\x35\x00\x46\x5A\x04\x27\x39\x05\x00\x00\x81\x02\x09\x31\x46\xDA\x02\x27\x6C\x03\x00\x00\x81\x02\xC0\x05\x0D\x09\x54\x15\x00\x25\x05\x75\x08\x95\x01\x81\x02\x05\x09\x09\x01\x09\x02\x09\x03\x15\x00\x25\x01\x75\x01\x95\x03\x81\x02\x95\x05\x81\x03\x05\x0D\x09\x56\x55\x0C\x66\x01\x10\x35\x00\x47\xFF\xFF\x00\x00\x15\x00\x27\xFF\xFF\x00\x00\x75\x10\x95\x01\x81\x02\x05\x0D\x09\x55\x15\x00\x25\x05\x75\x08\x95\x01\x85\x03\xB1\x02\x05\x0D\x09\x59\x15\x00\x25\x0F\x75\x08\x95\x01\x85\x04\xB1\x02\x06\x00\xFF\x85\x05\x75\x08\x15\x00\x09\xC6\x25\x08\x95\x01\xB1\x02\x09\xC7\x26\xFF\x00\x95\x20\xB1\x02\xC0\x05\x0D\x09\x0E\xA1\x01\x05\x0D\x09\x22\xA1\x02\x09\x52\x15\x00\x25\x0A\x75\x08\x95\x01\x85\x06\xB1\x02\xC0\x05\x0D\x09\x22\xA1\x00\x09\x57\x09\x58\x15\x00\x25\x01\x75\x01\x95\x02\x85\x07\xB1\x02\x95\x06\xB1\x03\xC0\x05\x0D\x09\x60\x15\x00\x25\x01\x75\x01\x95\x01\x85\x08\xB1\x02\x95\x07\xB1\x03\xC0\x06\x00\xFF\x09\x01\xA1\x01\x85\x42\x09\x06\x15\x00\x26\xFF\x00\x75\x08\x95\x03\xB1\x02\x06\x00\xFF\x09\x05\x15\x00\x26\xFF\x00\x75\x08\x96\x00\x01\x85\x41\xB1\x02\x85\x43\x09\x06\x15\x00\x26\xFF\x00\x75\x08\x95\x03\xB1\x02\xC0'
)

i2c = machine.I2C(0, sda=SDA_PIN, scl=SCL_PIN, freq=1000000)


class TouchPadInterface(HIDInterface):
    def __init__(self, interface_str="Standalone Framework Touchpad"):
        super().__init__(
            _TOUCH_PAD_REPORT_DESC,
            protocol=_INTERFACE_PROTOCOL_MOUSE,
            interface_str=interface_str
        )
        self._buf = bytearray(35)

    
    def send_report(self, report):     
        struct.pack_into('35B', self._buf, 0, REPORT_ID, *report)
        if IS_DEBUG:
            print(' '.join('{:02x}'.format(x) for x in self._buf))
        else:
            return super().send_report(self._buf)
    
    # TODO: Somewhat works; can send the report, but it isn't working as nicely. Rate? Bouncing? 
    def callback(self, pin):
        # Code for fetching the report from https://hackaday.com/2024/04/17/human-interfacing-devices-hid-over-i2c/
        report_len = i2c.readfrom(TOUCHPAD_ADDR, 1)[0]
        if report_len:
            report = i2c.readfrom(TOUCHPAD_ADDR, report_len)
            if report[2] == REPORT_ID:                    
                report = report[3:]
                self.send_report(report)

            
def runner():
    
    TP = TouchPadInterface()
    INT_PIN.irq(trigger=machine.Pin.IRQ_FALLING, handler=TP.callback)
    
    if not IS_DEBUG:
        usb.device.get().init(TP, builtin_driver=True)

    # wait for host to enumerate as a HID device
    while not TP.is_open():
        time.sleep_ms(100)
       
    pass


runner()


